     1                                  ; external functions from X11 library
     2                                  extern XOpenDisplay
     3                                  extern XDisplayName
     4                                  extern XCloseDisplay
     5                                  extern XCreateSimpleWindow
     6                                  extern XMapWindow
     7                                  extern XRootWindow
     8                                  extern XSelectInput
     9                                  extern XFlush
    10                                  extern XCreateGC
    11                                  extern XSetForeground
    12                                  extern XDrawLine
    13                                  extern XDrawPoint
    14                                  extern XFillArc
    15                                  extern XNextEvent
    16                                  
    17                                  ; external functions from stdio library (ld-linux-x86-64.so.2)    
    18                                  extern printf
    19                                  extern exit
    20                                  
    21                                  %define	StructureNotifyMask	131072
    22                                  %define KeyPressMask		1
    23                                  %define ButtonPressMask		4
    24                                  %define MapNotify		19
    25                                  %define KeyPress		2
    26                                  %define ButtonPress		4
    27                                  %define Expose			12
    28                                  %define ConfigureNotify		22
    29                                  %define CreateNotify 16
    30                                  %define QWORD	8
    31                                  %define DWORD	4
    32                                  %define WORD	2
    33                                  %define BYTE	1
    34                                  
    35                                  global main
    36                                  
    37                                  %DEFINE NUM_POINTS 10
    38                                  %DEFINE MAX_X 255
    39                                  %DEFINE MAX_Y 255
    40                                  
    41                                  section .data
    42 00000000 0000000000000000-       event:		times	24 dq 0
    42 00000000 <rep 18h>          
    43                                  
    44 000000C0 00000000                x1:	dd	0
    45 000000C4 00000000                x2:	dd	0
    46 000000C8 00000000                y1:	dd	0
    47 000000CC 00000000                y2:	dd	0
    48                                  
    49 000000D0 25640A00                fmt_printf: db "%d", 10, 0
    50 000000D4 76733A2025640A00        fmt_index: db "vs: %d", 10, 0
    51 000000DC 4D696E696D756D3A20-     fmt_min: db "Minimum: %d", 10, 0
    51 000000E5 25640A00           
    52                                  
    53                                  section .bss
    54 00000000 ????????????????        display_name:	resq	1
    55 00000008 ????????                screen:			resd	1
    56 0000000C ????????                depth:         	resd	1
    57 00000010 ????????                connection:    	resd	1
    58 00000014 ????????                width:         	resd	1
    59 00000018 ????????                height:        	resd	1
    60 0000001C ????????????????        window:		resq	1
    61 00000024 ????????????????        gc:		resq	1
    62                                  
    63 0000002C <res 14h>               coordx: resw NUM_POINTS
    64 00000040 <res 14h>               coordy: resw NUM_POINTS
    65 00000054 <res 14h>               enveloppe: resw NUM_POINTS
    66 00000068 ??                      sizeEnveloppe: resb 1
    67 00000069 ????                    randnum: resw 1
    68 0000006B ????                    minpoint: resw 1
    69                                  
    70                                  ; Variables de l'algo, potentiellement à renommer
    71 0000006D ????                    P: resw 1
    72                                  
    73                                  section .text
    74                                  main:
    75                                  ; Génération des points du programme
    76 00000000 BB00000000              mov rbx, 0
    77                                  populatex:
    78 00000005 660FC7F0                    rdrand ax
    79 00000009 66890425[69000000]          mov [randnum], ax
    80                                      modx:
    81 00000011 66812C25[69000000]-             sub word[randnum], MAX_X
    81 00000019 FF00               
    82 0000001B 66813C25[69000000]-             cmp word[randnum], MAX_X
    82 00000023 FF00               
    83 00000025 73EA                            jae modx
    84 00000027 668B0425[69000000]          mov ax, word[randnum]
    85 0000002F 6689841B[2C000000]          mov word[coordx+rbx*2], ax
    86                                      
    87 00000037 48BF-                       mov rdi, fmt_printf
    87 00000039 [D000000000000000] 
    88 00000041 480FB7B41B-                 movzx rsi, word[coordx+rbx*2]
    88 00000046 [2C000000]         
    89 0000004A B800000000                  mov rax, 0
    90 0000004F E8(00000000)                call printf
    91                                      
    92 00000054 48FFC3                      inc rbx
    93 00000057 4883FB0A                    cmp rbx, NUM_POINTS
    94 0000005B 72A8                        jb populatex
    95                                      
    96 0000005D BB00000000              mov rbx, 0
    97                                  populatey:
    98 00000062 F9                          stc
    99                                      checkcf:
   100 00000063 660FC7F0                        rdrand ax
   101 00000067 73FA                        jnc checkcf
   102 00000069 66890425[69000000]          mov [randnum], ax
   103                                      mody:
   104 00000071 66812C25[69000000]-             sub word[randnum], MAX_Y
   104 00000079 FF00               
   105 0000007B 66813C25[69000000]-             cmp word[randnum], MAX_Y
   105 00000083 FF00               
   106 00000085 73EA                            jae mody
   107 00000087 668B0425[69000000]          mov ax, word[randnum]
   108 0000008F 6689841B[40000000]          mov word[coordy+rbx*2], ax
   109                                      
   110 00000097 48BF-                       mov rdi, fmt_printf
   110 00000099 [D000000000000000] 
   111 000000A1 480FB7B41B-                 movzx rsi, word[coordy+rbx*2]
   111 000000A6 [40000000]         
   112 000000AA B800000000                  mov rax, 0
   113 000000AF E8(00000000)                call printf
   114                                      
   115 000000B4 48FFC3                      inc rbx
   116 000000B7 4883FB0A                    cmp rbx, NUM_POINTS
   117 000000BB 72A5                        jb populatey
   118                                      
   119                                  ; Trouver le point le plus à gauche
   120 000000BD BB00000000              mov rbx, 0
   121 000000C2 66891C25[6B000000]      mov word[minpoint], bx
   122 000000CA 48FFC3                  inc rbx
   123                                  minAlgo:
   124                                      ; On récupère le point minimum actuel
   125 000000CD 480FB70C25-                 movzx rcx, word[minpoint]
   125 000000D2 [6B000000]         
   126 000000D6 480FB78409-                 movzx rax, word[coordx+rcx*2]
   126 000000DB [2C000000]         
   127                                      
   128                                      ; On le compare au point parcouru actuel
   129 000000DF 663B841B[2C000000]          cmp ax, word[coordx+rbx*2]
   130 000000E7 720B                        jb lower
   131                                              
   132                                      ; Si minpoint > point actuel, on mets point actuel dans minpoint
   133 000000E9 4889D8                      mov rax, rbx
   134 000000EC 66890425[6B000000]          mov word[minpoint], ax
   135                                  
   136                                      lower:
   137 000000F4 48FFC3                      inc rbx
   138 000000F7 4883FB0A                    cmp rbx, NUM_POINTS
   139 000000FB 72D0                        jb minAlgo
   140                                      
   141 000000FD 4831FF                      xor     rdi,rdi
   142 00000100 E8(00000000)            call    XOpenDisplay	; Création de display
   143 00000105 48890425[00000000]      mov     qword[display_name],rax	; rax=nom du display
   144                                  
   145                                  ; display_name structure
   146                                  ; screen = DefaultScreen(display_name);
   147 0000010D 488B0425[00000000]      mov     rax,qword[display_name]
   148 00000115 8B80E0000000            mov     eax,dword[rax+0xe0]
   149 0000011B 890425[08000000]        mov     dword[screen],eax
   150                                  
   151 00000122 488B3C25[00000000]      mov rdi,qword[display_name]
   152 0000012A 8B3425[08000000]        mov esi,dword[screen]
   153 00000131 E8(00000000)            call XRootWindow
   154 00000136 4889C3                  mov rbx,rax
   155                                  
   156 00000139 488B3C25[00000000]      mov rdi,qword[display_name]
   157 00000141 4889DE                  mov rsi,rbx
   158 00000144 BA0A000000              mov rdx,10
   159 00000149 B90A000000              mov rcx,10
   160 0000014E 41B890010000            mov r8,400	; largeur
   161 00000154 41B990010000            mov r9,400	; hauteur
   162 0000015A 68FFFFFF00              push 0xFFFFFF	; background  0xRRGGBB
   163 0000015F 6800FF0000              push 0x00FF00
   164 00000164 6A01                    push 1
   165 00000166 E8(00000000)            call XCreateSimpleWindow
   166 0000016B 48890425[1C000000]      mov qword[window],rax
   167                                  
   168 00000173 488B3C25[00000000]      mov rdi,qword[display_name]
   169 0000017B 488B3425[1C000000]      mov rsi,qword[window]
   170 00000183 BA05000200              mov rdx,131077 ;131072
   171 00000188 E8(00000000)            call XSelectInput
   172                                  
   173 0000018D 488B3C25[00000000]      mov rdi,qword[display_name]
   174 00000195 488B3425[1C000000]      mov rsi,qword[window]
   175 0000019D E8(00000000)            call XMapWindow
   176                                  
   177 000001A2 488B3425[1C000000]      mov rsi,qword[window]
   178 000001AA BA00000000              mov rdx,0
   179 000001AF B900000000              mov rcx,0
   180 000001B4 E8(00000000)            call XCreateGC
   181 000001B9 48890425[24000000]      mov qword[gc],rax
   182                                  
   183 000001C1 488B3C25[00000000]      mov rdi,qword[display_name]
   184 000001C9 488B3425[24000000]      mov rsi,qword[gc]
   185 000001D1 BA00000000              mov rdx,0x000000	; Couleur du crayon
   186 000001D6 E8(00000000)            call XSetForeground
   187                                  
   188                                  boucle: ; boucle de gestion des évènements
   189 000001DB 488B3C25[00000000]      mov rdi,qword[display_name]
   190 000001E3 48BE-                   mov rsi,event
   190 000001E5 [0000000000000000] 
   191 000001ED E8(00000000)            call XNextEvent
   192                                  
   193 000001F2 833C25[00000000]16      cmp dword[event],ConfigureNotify	; à l'apparition de la fenêtre
   194 000001FA 7410                    je dessin							; on saute au label 'dessin'
   195                                  
   196 000001FC 833C25[00000000]02      cmp dword[event],KeyPress			; Si on appuie sur une touche
   197 00000204 0F84AE000000            je closeDisplay					; on saute au label 'closeDisplay' qui ferme la fenêtre
   198 0000020A EBCF                    jmp boucle
   199                                      
   200                                  ;#########################################
   201                                  ;#        DEBUT DE LA ZONE DE DESSIN     #
   202                                  ;#########################################
   203                                  dessin:
   204                                  
   205                                      ; boucle dessin point
   206                                      
   207 0000020C BB00000000                  mov rbx, 0  
   208                                      draw_loop:
   209                                          
   210 00000211 480FB7841B-                     movzx rax, word [coordx+rbx*2]
   210 00000216 [2C000000]         
   211 0000021A 480FB78C1B-                     movzx rcx, word [coordy+rbx*2]
   211 0000021F [40000000]         
   212                                          
   213                                          ;couleur du point 1
   214 00000223 488B3C25[00000000]              mov rdi,qword[display_name]
   215 0000022B 488B3425[24000000]              mov rsi,qword[gc]
   216 00000233 BA0000FF00                      mov edx,0xFF0000	; Couleur du crayon ; rouge
   217 00000238 E8(00000000)                    call XSetForeground
   218                                          
   219                                          ; Dessin d'un point rouge sous forme d'un petit rond : coordonnées (100,200)
   220 0000023D 488B3C25[00000000]              mov rdi,qword[display_name]
   221 00000245 488B3425[1C000000]              mov rsi,qword[window]
   222 0000024D 488B1425[24000000]              mov rdx,qword[gc]
   223 00000255 4889C1                          mov rcx,rax		; coordonnée en x du point
   224 00000258 83E903                          sub ecx,3
   225 0000025B 4989C8                          mov r8,rcx 		; coordonnée en y du point
   226 0000025E 4983E803                        sub r8,3
   227 00000262 41B906000000                    mov r9,6
   228 00000268 B8005A0000                      mov rax,23040
   229 0000026D 50                              push rax
   230 0000026E 6A00                            push 0
   231 00000270 4151                            push r9
   232 00000272 E8(00000000)                    call XFillArc
   233                                          
   234                                          ;#############
   235 00000277 50                              push rax
   236 00000278 48BF-                           mov rdi, fmt_printf
   236 0000027A [D000000000000000] 
   237 00000282 4889C6                          mov rsi, rax
   238 00000285 B800000000                      mov rax, 0
   239 0000028A E8(00000000)                    call printf
   240                                          ;#############
   241                                          
   242 0000028F 58                              pop rax
   243                                          
   244                                          ;++loopcounter
   245 00000290 48FFC3                          inc rbx
   246                                          
   247                                          ;check if end loop
   248 00000293 4883FB0A                        cmp rbx, NUM_POINTS
   249 00000297 0F8274FFFFFF                    jb draw_loop
   250                                  
   251                                  ; ############################
   252                                  ; # FIN DE LA ZONE DE DESSIN #
   253                                  ; ############################
   254 0000029D EB00                    jmp flush
   255                                  
   256                                  flush:
   257 0000029F 488B3C25[00000000]      mov rdi,qword[display_name]
   258 000002A7 E8(00000000)            call XFlush
   259 000002AC E92AFFFFFF              jmp boucle
   260 000002B1 B822000000              mov rax,34
   261 000002B6 0F05                    syscall
   262                                  
   263                                  closeDisplay:
   264 000002B8 488B0425[00000000]          mov     rax,qword[display_name]
   265 000002C0 4889CF                      mov     rdi,rcx
   266 000002C3 E8(00000000)                call    XCloseDisplay
   267 000002C8 4831FF                      xor	    rdi,rdi
   268 000002CB E8(00000000)                call    exit	
   269                                  
   270                                  ; Une fois cette étape fini, nous connaissons le point le plus à gauche.
   271                                  ; On commence donc la marche de Jarvis
   272 000002D0 BB00000000              mov rbx, 0
   273                                  jarvis:
   274                                      
   275                                  ; Pour fermer le programme proprement :
   276 000002D5 B83C000000              mov    rax, 60         
   277 000002DA BF00000000              mov    rdi, 0
   278 000002DF 0F05                    syscall
   279                                  
   280 000002E1 C3                      ret
